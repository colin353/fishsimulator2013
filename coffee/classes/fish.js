// Generated by CoffeeScript 1.6.2
var Fish;

Fish = (function() {
  function Fish(filename) {
    this.filename = filename;
    this.fish_raw = sync_get('game/assets/fish/' + filename);
    if (this.fish_raw.name == null) {
      alert("Illegal fish \"" + filename + "\"");
    }
    this.type = 'fish';
    this.image = this.fish_raw.image;
    this.price = this.fish_raw.price;
    this.name = this.fish_raw.name;
    this.fighting_now = false;
    this.crustacean = this.fish_raw.crustacean;
    this.health = this.fish_raw.hitpoints;
    this.alive = this.fish_raw.alive;
    this.scale = 0.5;
    if (this.fish_raw.scale != null) {
      this.scale = this.fish_raw.scale;
    }
    this.description = this.fish_raw.description;
    viewcontroller.loadImages(this.image);
    this.position = {
      x: 0,
      y: 0
    };
    this.direction = {
      x: Math.random(),
      y: Math.random()
    };
    this.fight = false;
    this.aggression = 2;
    this.aggressiveness = 2;
    if (this.fish_raw.aggressiveness != null) {
      this.aggressiveness = this.fish_raw.aggressiveness;
    }
    this.targetfish = null;
    this.enemyspotted = {
      x: null,
      y: null
    };
    this.happiness = 0;
    this.damage = .5;
    if (this.fish_raw.damage != null) {
      this.damage = this.fish_raw.damage;
    }
  }

  Fish.prototype.temp_ok = function() {
    if (document.tank.temperature > this.fish_raw.temp_max || document.tank.temperature < this.fish_raw.temp_min) {
      return false;
    } else {
      return true;
    }
  };

  Fish.prototype.salt_ok = function() {
    if (document.tank.salt > this.fish_raw.salt_max || document.tank.salt < this.fish_raw.salt_min) {
      return false;
    } else {
      return true;
    }
  };

  Fish.prototype.annhilate = function() {
    var i, _i, _ref, _results;

    _results = [];
    for (i = _i = 0, _ref = document.tankcontroller.fishes.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (document.tankcontroller.fishes[i] === this) {
        _results.push(document.tankcontroller.fishes.splice(i, 1));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Fish.prototype.nearest_pellet = function() {
    var bestdistance, bestpos, distance, i, p, xs, ys, _i, _len, _ref;

    bestdistance = 200;
    bestpos = {
      x: -1,
      y: -1
    };
    i = 0;
    _ref = document.tankcontroller.pellets;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      xs = p.position.x - (this.position.x + this.scale * document.viewcontroller.images[this.image].image.width / 2);
      xs = xs * xs;
      ys = p.position.y - (this.position.y + this.scale * document.viewcontroller.images[this.image].image.height / 2);
      ys = ys * ys;
      distance = Math.sqrt(xs + ys);
      if (distance < bestdistance) {
        bestdistance = distance;
        bestpos = {
          x: p.position.x,
          y: p.position.y
        };
        bestpos.pellet = i;
      }
      i++;
    }
    bestpos.distance = bestdistance;
    return bestpos;
  };

  Fish.prototype.nearest_fish = function() {
    var best, bestfish, d, f, _i, _len, _ref;

    best = 100;
    bestfish = null;
    _ref = document.tankcontroller.fishes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      f = _ref[_i];
      if (f === this) {
        continue;
      }
      d = calculate_distance(f.position, this.position);
      if (d < best) {
        best = d;
        bestfish = f;
      }
    }
    return bestfish;
  };

  Fish.prototype.fight_chance = function() {
    if (Math.random() < 0.001) {
      return true;
    }
    return false;
  };

  Fish.prototype.tick = function() {
    var closest, dr, flip, neighbor, norm, reverse;

    neighbor = this.nearest_fish();
    if ((neighbor != null) && (this.fight_chance() || this.fighting_now)) {
      this.fighting_now = true;
      neighbor.fighting_now = true;
      console.log("Fight between " + this.name + " and " + neighbor.name + "!");
      dr = calculate_difference(neighbor.position, this.position);
      norm = calculate_distance(dr);
      if (norm < 0.2) {
        norm = 0.2;
      }
      if (norm < 10) {
        neighbor.health -= this.damage;
        console.log("" + this.name + " dealt massive damage to " + neighbor.name + " (" + neighbor.health + ")!");
      } else {
        this.direction.x = 0.4 * dr.x / norm;
        this.direction.y = 0.4 * dr.y / norm;
        console.log("A huge lunge! " + norm);
      }
    }
    if (this.health <= 0) {
      alert("Your " + this.name + " has died!");
      this.annhilate();
    }
    if (this.fighting_now && Math.random() < 0.008) {
      this.fighting_now = false;
    }
    closest = this.nearest_pellet();
    if (closest.x > -1) {
      this.direction.x = (closest.x - (this.position.x + this.scale * document.viewcontroller.images[this.image].image.width / 2)) * 0.005;
      this.direction.y = (closest.y - (this.position.y + this.scale * document.viewcontroller.images[this.image].image.height / 2)) * 0.005;
      norm = Math.sqrt(this.direction.x ^ 2 + this.direction.y ^ 2);
      if (norm < .2) {
        norm = .2;
      }
      this.direction.x = this.direction.x / norm;
      this.direction.y = this.direction.y / norm;
      if (closest.distance < 30) {
        document.tankcontroller.pellets.splice(closest.pellet, 1);
        if (this.fish_raw.growth_rate != null) {
          this.scale += 0.01 * this.fish_raw.growth_rate;
        }
      }
    }
    flip = this.direction.x < 0;
    viewcontroller.renderSprite(this.image, this.position.x, this.position.y, this.scale, flip);
    if (this.salt_ok() === true) {
      this.position.x += this.direction.x * 10;
      this.position.y += this.direction.y * 10;
    }
    if (this.fighting_now || document.tank.temperature < 60) {
      this.position.x += (Math.random() - 0.5) * 10;
      this.position.y += (Math.random() - 0.5) * 10;
    }
    if (this.salt_ok() === false) {
      if (this.position.y < viewcontroller.canvas.height - 0.5 * viewcontroller.images[this.image].image.height - 50) {
        this.position.y += 0.5;
        if (this.health > 0) {
          this.health -= 0;
        }
      }
    }
    if (this.position.x > viewcontroller.canvas.width - 0.5 * viewcontroller.images[this.image].image.width || this.position.x < document.tank.pixelwaterline) {
      if (this.position.x < document.tank.pixelwaterline) {
        reverse = 1;
      } else {
        reverse = -1;
      }
      this.direction.x = Math.abs(this.direction.x) * reverse;
      if (this.salt_ok()) {
        this.direction.y = Math.random() - 0.5;
      }
    }
    if (this.position.y > viewcontroller.canvas.height - 0.5 * viewcontroller.images[this.image].image.height - 50 || this.position.y < document.tank.pixelwaterline) {
      if (this.position.y < document.tank.pixelwaterline) {
        reverse = 1;
      } else {
        reverse = -1;
      }
      this.direction.y = Math.abs(this.direction.y) * reverse;
      if (this.salt_ok()) {
        this.direction.x = Math.random() - 0.5;
      }
    }
    if (this.crustacean === 1) {
      this.position.y = viewcontroller.canvas.height - 0.5 * viewcontroller.images[this.image].image.height - 120;
    }
    document.tank.waste += 0.02;
    if (Math.floor(Math.random() * 100) === 28) {
      this.direction.x = Math.random() - 0.5;
      this.direction.y = Math.random() - 0.5;
    }
    return true;
  };

  return Fish;

})();
